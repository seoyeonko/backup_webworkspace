package com.example.demo.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.demo.model.UserEntity;
import com.example.demo.persistence.UserRepository;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class UserService {
	@Autowired
	private UserRepository userRepository;
	
	// UserEntity를 DB에 저장하는 메소드
	public UserEntity create(final UserEntity userEntity) {
		if(userEntity == null || userEntity.getEmail() == null) {
			throw new RuntimeException("Invalid arguments");
		}
		final String email = userEntity.getEmail();
		if(userRepository.existsByEmail(email)) {
			log.warn("Email already exists {}", email);
			throw new RuntimeException("Email already exists");
		}
		
		return userRepository.save(userEntity); // UserEntity를 DB에 저장 
	}
	
	// email, password를 이용 UserEntity를 검색하는 메소드
	public UserEntity getByCredentials(final String email, final String password, final PasswordEncoder encoder) {
		return userRepository.findByEmailAndPassword(email, password);
		
		// matches 메서드를 이용해 패스워드가 같은지 확인
		if (originalUser != null && encoder.mathces(password, originalUser.getPassword())) { // (사용자가 입력한 패스워드, 디비에 저장된 패스워드)
			return originalUser;
		}
		
		return null;
	}
}
